diff --git a/CMakeLists.txt b/CMakeLists.txt
index efc35b51..f4db9ad4 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -83,6 +83,7 @@ set(TRT_DIRECTORY "" CACHE PATH "If build tensorrt backend, need to define path
 set(ORT_DIRECTORY "" CACHE PATH "User can specify the installed onnxruntime directory.")
 set(OPENCV_DIRECTORY "" CACHE PATH "User can specify the installed opencv directory.")
 set(OPENVINO_DIRECTORY "" CACHE PATH "User can specify the installed openvino directory.")
+set(CUSTOM_DIRECTORY "" CACHE PATH "User can specify the installed third party libraries directory.")
 
 
 # Whether to build fastdeploy on device Nvidia Jetson
@@ -204,7 +205,6 @@ if(ENABLE_ORT_BACKEND)
   add_definitions(-DENABLE_ORT_BACKEND)
   list(APPEND ALL_DEPLOY_SRCS ${DEPLOY_ORT_SRCS})
   include(${PROJECT_SOURCE_DIR}/cmake/onnxruntime.cmake)
-  list(APPEND DEPEND_LIBS external_onnxruntime)
   if(WITH_GPU)
     list(APPEND ALL_DEPLOY_SRCS ${DEPLOY_OP_CUDA_KERNEL_SRCS})
   endif()
@@ -441,7 +441,6 @@ endif()
 if(ENABLE_PADDLE_FRONTEND)
   add_definitions(-DENABLE_PADDLE_FRONTEND)
   include(${PROJECT_SOURCE_DIR}/cmake/paddle2onnx.cmake)
-  list(APPEND DEPEND_LIBS external_paddle2onnx)
 endif(ENABLE_PADDLE_FRONTEND)
 
 
@@ -451,7 +450,7 @@ configure_file(${PROJECT_SOURCE_DIR}/python/scripts/process_libraries.py.in ${PR
 
 list(REMOVE_ITEM ALL_DEPLOY_SRCS ${DEPLOY_PYBIND_SRCS})
 
-add_library(${LIBRARY_NAME} SHARED ${ALL_DEPLOY_SRCS})
+add_library(${LIBRARY_NAME} STATIC ${ALL_DEPLOY_SRCS})
 
 redefine_file_macro(${LIBRARY_NAME})
 
diff --git a/cmake/onnxruntime.cmake b/cmake/onnxruntime.cmake
index 48b4675f..bec144b7 100644
--- a/cmake/onnxruntime.cmake
+++ b/cmake/onnxruntime.cmake
@@ -12,107 +12,25 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-include(ExternalProject)
-
-set(ONNXRUNTIME_PROJECT "extern_onnxruntime")
-set(ONNXRUNTIME_PREFIX_DIR ${THIRD_PARTY_PATH}/onnxruntime)
-set(ONNXRUNTIME_SOURCE_DIR
-    ${THIRD_PARTY_PATH}/onnxruntime/src/${ONNXRUNTIME_PROJECT})
-set(ONNXRUNTIME_INSTALL_DIR ${THIRD_PARTY_PATH}/install/onnxruntime)
-
-if (ORT_DIRECTORY)
-  message(STATUS "Use the onnxruntime lib specified by user. The ONNXRuntime path: ${ORT_DIRECTORY}")
-  STRING(REGEX REPLACE "\\\\" "/" ORT_DIRECTORY ${ORT_DIRECTORY})
-  set(ONNXRUNTIME_INC_DIR
-    "${ORT_DIRECTORY}/include"
-    CACHE PATH "onnxruntime include directory." FORCE)
-
-  set(ONNXRUNTIME_LIB_DIR
-    "${ORT_DIRECTORY}/lib"
-    CACHE PATH "onnxruntime lib directory." FORCE)
-else()
-  message(STATUS "Use the default onnxruntime lib. The ONNXRuntime path: ${ONNXRUNTIME_INSTALL_DIR}")
-  set(ONNXRUNTIME_INC_DIR
-      "${ONNXRUNTIME_INSTALL_DIR}/include"
-      CACHE PATH "onnxruntime include directory." FORCE)
-  set(ONNXRUNTIME_LIB_DIR
-      "${ONNXRUNTIME_INSTALL_DIR}/lib"
-      CACHE PATH "onnxruntime lib directory." FORCE)
-endif()
-set(CMAKE_BUILD_RPATH "${CMAKE_BUILD_RPATH}" "${ONNXRUNTIME_LIB_DIR}")
-
-set(ONNXRUNTIME_VERSION "1.12.0")
-set(ONNXRUNTIME_URL_PREFIX "https://bj.bcebos.com/paddle2onnx/libs/")
-
-if(WIN32)
-  if(WITH_GPU)
-    set(ONNXRUNTIME_FILENAME "onnxruntime-win-x64-gpu-${ONNXRUNTIME_VERSION}.zip")
-  else()
-    set(ONNXRUNTIME_FILENAME "onnxruntime-win-x64-${ONNXRUNTIME_VERSION}.zip")
-  endif()
-  if(NOT CMAKE_CL_64)
-    set(ONNXRUNTIME_FILENAME "onnxruntime-win-x86-${ONNXRUNTIME_VERSION}.zip")
-  endif()
-elseif(APPLE)
-  if(CURRENT_OSX_ARCH MATCHES "arm64")
-    set(ONNXRUNTIME_FILENAME "onnxruntime-osx-arm64-${ONNXRUNTIME_VERSION}.tgz")
-  else()
-    set(ONNXRUNTIME_FILENAME "onnxruntime-osx-x86_64-${ONNXRUNTIME_VERSION}.tgz")
-  endif()
-else()
-  if(WITH_GPU)
-    if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "aarch64")
-      message("Cannot compile with onnxruntime-gpu while in linux-aarch64 platform, fallback to onnxruntime-cpu")
-      set(ONNXRUNTIME_FILENAME "onnxruntime-linux-aarch64-${ONNXRUNTIME_VERSION}.tgz")
-    else()
-      set(ONNXRUNTIME_FILENAME "onnxruntime-linux-x64-gpu-${ONNXRUNTIME_VERSION}.tgz")
-    endif()
-  else()
-    if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "aarch64")
-      set(ONNXRUNTIME_FILENAME "onnxruntime-linux-aarch64-${ONNXRUNTIME_VERSION}.tgz")
-    else()
-      set(ONNXRUNTIME_FILENAME "onnxruntime-linux-x64-${ONNXRUNTIME_VERSION}.tgz")
-    endif()
-  endif()
-endif()
-set(ONNXRUNTIME_URL "${ONNXRUNTIME_URL_PREFIX}${ONNXRUNTIME_FILENAME}")
-
-include_directories(${ONNXRUNTIME_INC_DIR}
-)# For ONNXRUNTIME code to include internal headers.
-
-if(WIN32)
-  set(ONNXRUNTIME_LIB
-      "${ONNXRUNTIME_LIB_DIR}/onnxruntime.lib"
-      CACHE FILEPATH "ONNXRUNTIME shared library." FORCE)
-elseif(APPLE)
-  set(ONNXRUNTIME_LIB
-      "${ONNXRUNTIME_LIB_DIR}/libonnxruntime.dylib"
-      CACHE FILEPATH "ONNXRUNTIME shared library." FORCE)
-else()
-  set(ONNXRUNTIME_LIB
-      "${ONNXRUNTIME_LIB_DIR}/libonnxruntime.so"
-      CACHE FILEPATH "ONNXRUNTIME shared library." FORCE)
-endif()
-
-if (NOT ORT_DIRECTORY)
-  ExternalProject_Add(
-    ${ONNXRUNTIME_PROJECT}
-    ${EXTERNAL_PROJECT_LOG_ARGS}
-    URL ${ONNXRUNTIME_URL}
-    PREFIX ${ONNXRUNTIME_PREFIX_DIR}
-    DOWNLOAD_NO_PROGRESS 1
-    CONFIGURE_COMMAND ""
-    BUILD_COMMAND ""
-    UPDATE_COMMAND ""
-    INSTALL_COMMAND
-      ${CMAKE_COMMAND} -E remove_directory ${ONNXRUNTIME_INSTALL_DIR} &&
-      ${CMAKE_COMMAND} -E make_directory ${ONNXRUNTIME_INSTALL_DIR} &&
-      ${CMAKE_COMMAND} -E rename ${ONNXRUNTIME_SOURCE_DIR}/lib/ ${ONNXRUNTIME_INSTALL_DIR}/lib &&
-      ${CMAKE_COMMAND} -E copy_directory ${ONNXRUNTIME_SOURCE_DIR}/include
-      ${ONNXRUNTIME_INC_DIR}
-    BUILD_BYPRODUCTS ${ONNXRUNTIME_LIB})
-endif()
-
-add_library(external_onnxruntime STATIC IMPORTED GLOBAL)
-set_property(TARGET external_onnxruntime PROPERTY IMPORTED_LOCATION ${ONNXRUNTIME_LIB})
-add_dependencies(external_onnxruntime ${ONNXRUNTIME_PROJECT})
\ No newline at end of file
+include_directories("${CUSTOM_DIRECTORY}/include/onnxruntime")
+
+list(APPEND DEPEND_LIBS
+    "${CUSTOM_DIRECTORY}/lib/libonnxruntime_common.a"
+    "${CUSTOM_DIRECTORY}/lib/libonnxruntime_flatbuffers.a"
+    "${CUSTOM_DIRECTORY}/lib/libonnxruntime_framework.a"
+    "${CUSTOM_DIRECTORY}/lib/libonnxruntime_graph.a"
+    "${CUSTOM_DIRECTORY}/lib/libonnxruntime_mlas.a"
+    "${CUSTOM_DIRECTORY}/lib/libonnxruntime_optimizer.a"
+    "${CUSTOM_DIRECTORY}/lib/libonnxruntime_providers.a"
+    "${CUSTOM_DIRECTORY}/lib/libonnxruntime_session.a"
+    "${CUSTOM_DIRECTORY}/lib/libonnxruntime_util.a"
+    "${CUSTOM_DIRECTORY}/lib/libprotobuf.a"
+    "${CUSTOM_DIRECTORY}/lib/onnxruntime/external/libabsl_throw_delegate.a"
+    "${CUSTOM_DIRECTORY}/lib/onnxruntime/external/libabsl_raw_hash_set.a"
+    "${CUSTOM_DIRECTORY}/lib/onnxruntime/external/libabsl_low_level_hash.a"
+    "${CUSTOM_DIRECTORY}/lib/onnxruntime/external/libabsl_hash.a"
+    "${CUSTOM_DIRECTORY}/lib/onnxruntime/external/libabsl_city.a"
+    "${CUSTOM_DIRECTORY}/lib/onnxruntime/external/libnsync_cpp.a"
+    "${CUSTOM_DIRECTORY}/lib/onnxruntime/external/libonnx.a"
+    "${CUSTOM_DIRECTORY}/lib/onnxruntime/external/libonnx_proto.a"
+    "${CUSTOM_DIRECTORY}/lib/onnxruntime/external/libre2.a")
diff --git a/cmake/paddle2onnx.cmake b/cmake/paddle2onnx.cmake
index ee5c46c5..9aec9f47 100755
--- a/cmake/paddle2onnx.cmake
+++ b/cmake/paddle2onnx.cmake
@@ -11,77 +11,7 @@
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
-include(ExternalProject)
 
-set(PADDLE2ONNX_PROJECT "extern_paddle2onnx")
-set(PADDLE2ONNX_PREFIX_DIR ${THIRD_PARTY_PATH}/paddle2onnx)
-set(PADDLE2ONNX_SOURCE_DIR
-    ${THIRD_PARTY_PATH}/paddle2onnx/src/${PADDLE2ONNX_PROJECT})
-set(PADDLE2ONNX_INSTALL_DIR ${THIRD_PARTY_PATH}/install/paddle2onnx)
-set(PADDLE2ONNX_INC_DIR
-    "${PADDLE2ONNX_INSTALL_DIR}/include"
-    CACHE PATH "paddle2onnx include directory." FORCE)
-set(PADDLE2ONNX_LIB_DIR
-    "${PADDLE2ONNX_INSTALL_DIR}/lib/"
-    CACHE PATH "paddle2onnx lib directory." FORCE)
-set(CMAKE_BUILD_RPATH "${CMAKE_BUILD_RPATH}"
-                      "${PADDLE2ONNX_LIB_DIR}")
+include_directories("${CUSTOM_DIRECTORY}/include")
 
-include_directories(${PADDLE2ONNX_INC_DIR})
-if(WIN32)
-  set(PADDLE2ONNX_COMPILE_LIB
-      "${PADDLE2ONNX_INSTALL_DIR}/lib/paddle2onnx.lib"
-      CACHE FILEPATH "paddle2onnx compile library." FORCE)
-elseif(APPLE)
-  set(PADDLE2ONNX_COMPILE_LIB
-      "${PADDLE2ONNX_INSTALL_DIR}/lib/libpaddle2onnx.dylib"
-      CACHE FILEPATH "paddle2onnx compile library." FORCE)
-else()
-  set(PADDLE2ONNX_COMPILE_LIB
-      "${PADDLE2ONNX_INSTALL_DIR}/lib/libpaddle2onnx.so"
-      CACHE FILEPATH "paddle2onnx compile library." FORCE)
-endif(WIN32)
-
-set(PADDLE2ONNX_URL_BASE "https://bj.bcebos.com/fastdeploy/third_libs/")
-set(PADDLE2ONNX_VERSION "1.0.4rc0")
-if(WIN32)
-  set(PADDLE2ONNX_FILE "paddle2onnx-win-x64-${PADDLE2ONNX_VERSION}.zip")
-  if(NOT CMAKE_CL_64)
-    set(PADDLE2ONNX_FILE "paddle2onnx-win-x86-${PADDLE2ONNX_VERSION}.zip")
-  endif()
-elseif(APPLE)
-  if(CURRENT_OSX_ARCH MATCHES "arm64")
-    set(PADDLE2ONNX_FILE "paddle2onnx-osx-arm64-${PADDLE2ONNX_VERSION}.tgz")
-  else()
-    set(PADDLE2ONNX_FILE "paddle2onnx-osx-x86_64-${PADDLE2ONNX_VERSION}.tgz")
-  endif()
-else()
-  if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "aarch64")
-    set(PADDLE2ONNX_FILE "paddle2onnx-linux-aarch64-${PADDLE2ONNX_VERSION}.tgz")
-  else()
-    set(PADDLE2ONNX_FILE "paddle2onnx-linux-x64-${PADDLE2ONNX_VERSION}.tgz")
-  endif()
-endif()
-set(PADDLE2ONNX_URL "${PADDLE2ONNX_URL_BASE}${PADDLE2ONNX_FILE}")
-
-ExternalProject_Add(
-  ${PADDLE2ONNX_PROJECT}
-  ${EXTERNAL_PROJECT_LOG_ARGS}
-  URL ${PADDLE2ONNX_URL}
-  PREFIX ${PADDLE2ONNX_PREFIX_DIR}
-  DOWNLOAD_NO_PROGRESS 1
-  CONFIGURE_COMMAND ""
-  BUILD_COMMAND ""
-  UPDATE_COMMAND ""
-  INSTALL_COMMAND
-    ${CMAKE_COMMAND} -E remove_directory ${PADDLE2ONNX_INSTALL_DIR} &&
-    ${CMAKE_COMMAND} -E make_directory ${PADDLE2ONNX_INSTALL_DIR} &&
-    ${CMAKE_COMMAND} -E rename ${PADDLE2ONNX_SOURCE_DIR}/lib/
-    ${PADDLE2ONNX_LIB_DIR} && ${CMAKE_COMMAND} -E copy_directory
-    ${PADDLE2ONNX_SOURCE_DIR}/include ${PADDLE2ONNX_INC_DIR}
-  BUILD_BYPRODUCTS ${PADDLE2ONNX_COMPILE_LIB})
-
-add_library(external_paddle2onnx STATIC IMPORTED GLOBAL)
-set_property(TARGET external_paddle2onnx PROPERTY IMPORTED_LOCATION
-                                         ${PADDLE2ONNX_COMPILE_LIB})
-add_dependencies(external_paddle2onnx ${PADDLE2ONNX_PROJECT})
+list(APPEND DEPEND_LIBS "${CUSTOM_DIRECTORY}/lib/libpaddle2onnx.1.0.4.dylib")
